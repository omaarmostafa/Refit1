// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using Refit;
using System.Text;
using System.Threading.Tasks;
using Refit1.Models;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Refit1.Services
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedICarAPI : ICarAPI
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedICarAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<HttpResponseMessage> GetCars()
        {
            var arguments = new object[] {  };
            var func = methodImpls.GetOrAdd("GetCars()", _ => requestBuilder.BuildRestResultFuncForMethod("GetCars", new Type[] {  }));
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<HttpResponseMessage> GetCarByID(int id,string token)
        {
            var arguments = new object[] { id,token };
            var func = methodImpls.GetOrAdd("GetCarByID(int id,string token)", _ => requestBuilder.BuildRestResultFuncForMethod("GetCarByID", new Type[] { typeof(int),typeof(string) }));
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

    }
}

namespace Refit1.Services
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIMakeUpApi : IMakeUpApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIMakeUpApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<HttpResponseMessage> GetMakeUps(string brand)
        {
            var arguments = new object[] { brand };
            var func = methodImpls.GetOrAdd("GetMakeUps(string brand)", _ => requestBuilder.BuildRestResultFuncForMethod("GetMakeUps", new Type[] { typeof(string) }));
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<MakeUp> CreateMakeUp(MakeUp makeUp,string token)
        {
            var arguments = new object[] { makeUp,token };
            var func = methodImpls.GetOrAdd("CreateMakeUp(MakeUp makeUp,string token)", _ => requestBuilder.BuildRestResultFuncForMethod("CreateMakeUp", new Type[] { typeof(MakeUp),typeof(string) }));
            return (Task<MakeUp>)func(Client, arguments);
        }

    }
}

namespace Refit1.Services
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [Preserve]
    public partial class AutoGeneratedIUserAPI : IUserAPI
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly ConcurrentDictionary<string, Func<HttpClient, object[], object>> methodImpls = new ConcurrentDictionary<string, Func<HttpClient, object[], object>>();
        readonly IRequestBuilder requestBuilder;

        public AutoGeneratedIUserAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<HttpResponseMessage> Login(Dictionary<string, string> data)
        {
            var arguments = new object[] { data };
            var func = methodImpls.GetOrAdd("Login(Dictionary<string, string> data)", _ => requestBuilder.BuildRestResultFuncForMethod("Login", new Type[] { typeof(Dictionary<string, string>) }));
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

    }
}
